{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///external amd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./types.ts","webpack:///./datasource.ts","webpack:///./components/HaystackQueryTypeSelector.tsx","webpack:///./components/HaystackQueryInput.tsx","webpack:///./components/VariableQueryEditor.tsx","webpack:///./module.ts","webpack:///./components/ConfigEditor.tsx","webpack:///./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","module.exports = __WEBPACK_EXTERNAL_MODULE__177__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { DataQuery, DataSourceJsonData, SelectableValue } from '@grafana/data';\n\nexport interface HaystackQuery extends DataQuery {\n  type: string; // Defines the type of query that should be executed\n  eval: string;\n  hisRead: string;\n  hisReadFilter: string;\n  read: string;\n}\n\n// OpsQuery is a query that is used to get the available ops from the datasource.\nexport class OpsQuery implements HaystackQuery {\n  type = 'ops';\n  eval = '';\n  hisRead = '';\n  hisReadFilter = '';\n  read = '';\n\n  refId: string;\n\n  constructor(refId: string) {\n    this.refId = refId;\n  }\n}\n\nexport interface QueryType extends SelectableValue<string> {\n  apiRequirements: string[];\n}\n\nexport interface HaystackVariableQuery {\n  query: HaystackQuery;\n  column: string;\n}\n\nexport const DEFAULT_QUERY: Partial<HaystackQuery> = {\n  type: 'eval',\n  eval: '[{ts: $__timeRange_start, v0: 0}, {ts: $__timeRange_end, v0: 10}].toGrid',\n  hisRead: 'abcdef-123456',\n  hisReadFilter: 'point and his and temp and air and outside',\n  read: 'equip and ahu',\n};\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface HaystackDataSourceOptions extends DataSourceJsonData {\n  url: string;\n  username: string;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface HaystackSecureJsonData {\n  password: string;\n}\n","import {\n  DataSourceInstanceSettings,\n  CoreApp,\n  ScopedVars,\n  DataQueryRequest,\n  DataFrame,\n  Field,\n  MetricFindValue,\n  Vector,\n  getDefaultTimeRange,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\n\nimport {\n  HaystackQuery,\n  OpsQuery,\n  HaystackDataSourceOptions,\n  DEFAULT_QUERY,\n  HaystackVariableQuery,\n  QueryType,\n} from './types';\nimport { firstValueFrom } from 'rxjs';\n\nexport const queryTypes: QueryType[] = [\n  { label: 'Eval', value: 'eval', apiRequirements: ['eval'], description: 'Evaluate an Axon expression' },\n  { label: 'HisRead', value: 'hisRead', apiRequirements: ['hisRead'], description: 'Read the history of a point' },\n  {\n    label: 'HisRead via filter',\n    value: 'hisReadFilter',\n    apiRequirements: ['read', 'hisRead'],\n    description: 'Read the history of points found using a filter',\n  },\n  { label: 'Read', value: 'read', apiRequirements: ['read'], description: 'Read the records matched by a filter' },\n];\n\nexport class DataSource extends DataSourceWithBackend<HaystackQuery, HaystackDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<HaystackDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  // Queries the available ops from the datasource and returns the queryTypes that are supported.\n  async loadOps(refId: string): Promise<QueryType[]> {\n    let opsRequest = this.opsRequest(refId);\n    let stream = this.query(opsRequest);\n    let result = await firstValueFrom(stream);\n    if (result?.state === 'Error') {\n      return [];\n    }\n    let frame = result?.data?.find((frame: DataFrame) => {\n      return frame.refId === refId;\n    });\n    let opSymbols =\n      frame?.fields?.find((field: Field<any, Vector<string>>) => {\n        return field.name === 'def';\n      }).values ?? [];\n    let ops: string[] = opSymbols.map((opSymbol: string) => {\n      if (opSymbol.startsWith('^op:')) {\n        return opSymbol.substring(4);\n      } else {\n        return opSymbol;\n      }\n    });\n\n    let availableQueryTypes = queryTypes.filter((queryType) => {\n      return queryType.apiRequirements.every((apiRequirement) => {\n        return (\n          ops.find((op) => {\n            return op === apiRequirement;\n          }) !== undefined\n        );\n      });\n    });\n\n    return availableQueryTypes;\n  }\n\n  applyTemplateVariables(query: HaystackQuery, scopedVars: ScopedVars): Record<string, any> {\n    return {\n      ...query,\n      eval: getTemplateSrv().replace(query.eval, scopedVars, 'csv'),\n      hisRead: getTemplateSrv().replace(query.hisRead, scopedVars, 'csv'),\n      hisReadFilter: getTemplateSrv().replace(query.hisReadFilter, scopedVars, 'csv'),\n      read: getTemplateSrv().replace(query.read, scopedVars, 'csv'),\n    };\n  }\n\n  // This is called when the user is selecting a variable value\n  async metricFindQuery(variableQuery: HaystackVariableQuery, options?: any) {\n    let request: HaystackQuery = variableQuery.query;\n    let response = await this.query({ targets: [request] } as DataQueryRequest<HaystackQuery>).toPromise();\n\n    if (response === undefined || response.data === undefined) {\n      return [];\n    }\n\n    return response.data.reduce((acc: MetricFindValue[], frame: DataFrame) => {\n      let field = frame.fields[0];\n      if (variableQuery.column !== undefined && variableQuery.column !== '') {\n        // If a column was input, match the column name\n        field = frame.fields.find((field: Field) => field.name === variableQuery.column) ?? field;\n      }\n\n      let fieldVals = field.values.toArray().map((value) => {\n        if (value.startsWith('@')) {\n          // Detect ref using @ prefix, and adjust value to just the Ref\n          let spaceIndex = value.indexOf(' ');\n          let id = value.substring(0, spaceIndex);\n          return { text: value, value: id };\n        } else {\n          // Otherwise, just use the value directly\n          return { text: value, value: value };\n        }\n      });\n      return acc.concat(fieldVals);\n    }, []);\n  }\n\n  getDefaultQuery(_: CoreApp): Partial<HaystackQuery> {\n    return DEFAULT_QUERY;\n  }\n\n  // Returns a DataQueryRequest that gets the available ops from the datasource\n  // This applies a bunch of defaults because it's not a time series query\n  private opsRequest(refId: string): DataQueryRequest<HaystackQuery> {\n    return {\n      requestId: 'ops',\n      dashboardId: 0,\n      interval: '0',\n      intervalMs: 0,\n      panelId: 0,\n      range: getDefaultTimeRange(),\n      scopedVars: {},\n      targets: [new OpsQuery(refId)],\n      timezone: 'UTC',\n      app: 'ops',\n      startTime: 0,\n    };\n  }\n}\n","import { AsyncSelect, InlineField } from '@grafana/ui';\nimport React, { } from 'react';\nimport { QueryType } from 'types';\nimport { DataSource, queryTypes } from '../datasource';\n\nexport interface HaystackQueryTypeSelectorProps {\n  datasource: DataSource | null;\n  type: string;\n  refId: string;\n  onChange: (type: string) => void;\n}\n\nexport function HaystackQueryTypeSelector({ datasource, type, refId, onChange }: HaystackQueryTypeSelectorProps) {\n  const onTypeChange = (event: QueryType | null) => {\n    onChange(event?.value ?? queryTypeDefault.value!);\n  };\n\n  const queryTypeDefault = queryTypes[0];\n  function queryTypeFromValue(value: string): QueryType | null {\n    return queryTypes.find((queryType) => queryType.value === value) ?? null;\n  }\n\n  async function defaultQueryTypes(): Promise<QueryType[]> {\n    return new Promise<QueryType[]>((resolve) => { resolve(queryTypes);})\n  }\n  \n  return (\n    <InlineField label=\"Type\">\n      <AsyncSelect\n        loadOptions={() => {\n          return datasource?.loadOps(refId) ?? defaultQueryTypes();\n        }}\n        defaultOptions\n        value={queryTypeFromValue(type)}\n        width={30}\n        onChange={(queryType) => {\n          // QueryType comes back as a SelectableValue, so we just convert it to the QueryType\n          onTypeChange(queryTypeFromValue(queryType.value ?? \"\"));\n        }}\n      />\n    </InlineField>\n  );\n}\n","import { Icon, InlineField, Input } from '@grafana/ui';\nimport React, { ChangeEvent } from 'react';\nimport { DEFAULT_QUERY, HaystackQuery } from 'types';\n\nexport interface HaystackQueryInputProps {\n  query: HaystackQuery;\n  onChange: (query: string) => void;\n}\n\nexport function HaystackQueryInput({ query, onChange }: HaystackQueryInputProps) {\n  const onQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n  };\n\n  let width = 100;\n  switch (query.type) {\n    case \"eval\":\n      return (\n        <InlineField>\n          <Input\n            width={width}\n            prefix={<Icon name=\"angle-right\" />}\n            onChange={onQueryChange}\n            value={query.eval}\n            placeholder={DEFAULT_QUERY.eval}\n          />\n        </InlineField>\n      );\n    case \"hisRead\":\n      return (\n        <InlineField>\n          <Input\n            width={width}\n            prefix={'@'}\n            onChange={onQueryChange}\n            value={query.hisRead}\n            placeholder={DEFAULT_QUERY.hisRead}\n          />\n        </InlineField>\n      );\n    case \"hisReadFilter\":\n      return (\n        <InlineField>\n          <Input\n            width={width}\n            prefix={<Icon name=\"filter\" />}\n            onChange={onQueryChange}\n            value={query.hisReadFilter}\n            placeholder={DEFAULT_QUERY.hisReadFilter}\n          />\n        </InlineField>\n      );\n    case \"read\":\n      return (\n        <InlineField>\n          <Input\n            width={width}\n            prefix={<Icon name=\"filter\" />}\n            onChange={onQueryChange}\n            value={query.read}\n            placeholder={DEFAULT_QUERY.read}\n          />\n        </InlineField>\n      );\n  }\n  return <p>Select a query type</p>;\n}","import React, { useState } from 'react';\nimport { HaystackQuery, HaystackVariableQuery } from '../types';\nimport { HaystackQueryTypeSelector } from './HaystackQueryTypeSelector';\nimport { HaystackQueryInput } from './HaystackQueryInput';\n\ninterface VariableQueryProps {\n  query: HaystackVariableQuery;\n  onChange: (query: HaystackVariableQuery, definition: string) => void;\n}\n\nconst blankQuery: Partial<HaystackQuery> = {\n  refId: \"variable\",\n  type: '',\n  eval: '',\n  hisRead: '',\n  read: '',\n};\n\nexport const VariableQueryEditor: React.FC<VariableQueryProps> = ({ onChange, query: variableQuery }) => {\n  const [state, setState] = useState(variableQuery);\n\n  const saveQuery = () => {\n    let query =  state.query ?? blankQuery\n    let type = query.type;\n    let queryCmd = \"\";\n    if (query.type === \"hisRead\") {\n      queryCmd = query.hisRead\n    } else if (query.type === \"eval\") {\n      queryCmd = query.eval\n    } else if (query.type === \"read\") {\n      queryCmd = query.read\n    }\n    let column = \"none\";\n    if (state.column !== undefined && state.column !== '') {\n      column = `'${state.column}'`;\n    }\n    onChange(state, `Type: '${type}' Query: '${queryCmd}' Column: ${column}`);\n  };\n\n  const onTypeChange = (newType: string) => {\n    let query = {...state.query ?? blankQuery};\n    query.type = newType;\n    setState({ ...state, query: query});\n  };\n\n  const onQueryChange = (newQuery: string) => {\n    let query = {...state.query ?? blankQuery};\n    if (state.query.type === \"hisRead\") {\n      query.hisRead = newQuery\n    } else if (state.query.type === \"eval\") {\n      query.eval = newQuery\n    } else if (state.query.type === \"read\") {\n      query.read = newQuery\n    }\n    setState({ ...state, query: query});\n  };\n\n  const onColumnChange = (event: React.FormEvent<HTMLInputElement>) => {\n    setState({...state, column: event.currentTarget.value,});\n  };\n\n  return (\n    <div onBlur={saveQuery}>\n      <HaystackQueryTypeSelector\n        datasource={null}\n        type={state.query?.type ?? blankQuery.type}\n        refId={state.query?.refId ?? blankQuery.refId}\n        onChange={onTypeChange}\n      />\n      <HaystackQueryInput\n        query={state.query ?? blankQuery}\n        onChange={onQueryChange}\n      />\n      <div className=\"gf-form\">\n        <span className=\"gf-form-label width-10\">Column</span>\n        <input\n          name=\"column\"\n          className=\"gf-form-input\"\n          onChange={onColumnChange}\n          value={state.column}\n        />\n      </div>\n    </div>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { VariableQueryEditor } from './components/VariableQueryEditor';\nimport { HaystackQuery, HaystackDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, HaystackQuery, HaystackDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setVariableQueryEditor(VariableQueryEditor);\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, Input, SecretInput } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { HaystackDataSourceOptions, HaystackSecureJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<HaystackDataSourceOptions> {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n  const onUrlChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const jsonData = {\n      ...options.jsonData,\n      url: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  const onUsernameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const jsonData = {\n      ...options.jsonData,\n      username: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  // Secure field (only sent to the backend)\n  const onPasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        password: event.target.value,\n      },\n    });\n  };\n\n  const onResetPassword = () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        password: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        password: '',\n      },\n    });\n  };\n\n  const { jsonData, secureJsonFields } = options;\n  const secureJsonData = (options.secureJsonData || {}) as HaystackSecureJsonData;\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField label=\"URL\" labelWidth={12}>\n        <Input\n          onChange={onUrlChange}\n          value={jsonData.url || ''}\n          placeholder=\"e.g. http://mywebsite.com/api/\"\n          width={60}\n        />\n      </InlineField>\n      <InlineField label=\"Username\" labelWidth={12}>\n        <Input\n          onChange={onUsernameChange}\n          value={jsonData.username || ''}\n          placeholder=\"It's a good idea to create a user specifically for this connection\"\n          width={60}\n        />\n      </InlineField>\n      <InlineField label=\"Password\" labelWidth={12}>\n        <SecretInput\n          isConfigured={(secureJsonFields && secureJsonFields.password) as boolean}\n          value={secureJsonData.password || ''}\n          placeholder=\"\"\n          width={60}\n          onReset={onResetPassword}\n          onChange={onPasswordChange}\n        />\n      </InlineField>\n    </div>\n  );\n}\n","import React, {  } from 'react';\nimport { Button, Form, VerticalGroup } from '@grafana/ui';\nimport { QueryEditorProps } from '@grafana/data';\nimport { DataSource } from '../datasource';\nimport { HaystackDataSourceOptions, HaystackQuery } from '../types';\nimport { HaystackQueryTypeSelector } from './HaystackQueryTypeSelector';\nimport { HaystackQueryInput } from './HaystackQueryInput';\n\ntype Props = QueryEditorProps<DataSource, HaystackQuery, HaystackDataSourceOptions>;\n\nexport function QueryEditor({ datasource, query, onChange, onRunQuery }: Props) {\n  const onTypeChange = (newType: string) => {\n    onChange({ ...query, type: newType });\n  };\n  const onQueryChange = (newQuery: string) => {\n    if (query.type === \"eval\") {\n      onChange({ ...query, eval: newQuery });\n    } else if (query.type === \"hisRead\") {\n      onChange({ ...query, hisRead: newQuery });\n    } else if (query.type === \"hisReadFilter\") {\n      onChange({ ...query, hisReadFilter: newQuery });\n    } else if (query.type === \"read\") {\n      onChange({ ...query, read: newQuery });\n    }\n  };\n\n  function onSubmit(newQuery: Partial<HaystackQuery>) {\n    query = { ...query, ...newQuery };\n    onRunQuery();\n  }\n\n  return (\n    <div className=\"gf-form\">\n      <Form onSubmit={onSubmit}>\n        {({ register, errors }) => {\n          return (\n            <VerticalGroup>\n              <HaystackQueryTypeSelector\n                datasource={datasource}\n                type={query.type}\n                refId={query.refId}\n                onChange={onTypeChange}\n              />\n              <HaystackQueryInput\n                query={query}\n                onChange={onQueryChange}\n              />\n              <Button type=\"submit\" >Run</Button>\n            </VerticalGroup>\n          );\n        }}\n      </Form>\n    </div>\n  );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__WEBPACK_EXTERNAL_MODULE__177__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","OpsQuery","constructor","refId","type","eval","hisRead","hisReadFilter","read","this","DEFAULT_QUERY","queryTypes","label","apiRequirements","description","DataSource","DataSourceWithBackend","loadOps","result","frame","opsRequest","stream","query","firstValueFrom","state","data","find","ops","fields","field","name","values","map","opSymbol","startsWith","substring","filter","queryType","every","apiRequirement","op","applyTemplateVariables","scopedVars","getTemplateSrv","replace","metricFindQuery","variableQuery","options","request","response","targets","toPromise","reduce","acc","column","fieldVals","toArray","spaceIndex","indexOf","id","text","concat","getDefaultQuery","_","requestId","dashboardId","interval","intervalMs","panelId","range","getDefaultTimeRange","timezone","app","startTime","instanceSettings","super","HaystackQueryTypeSelector","datasource","onChange","queryTypeDefault","queryTypeFromValue","defaultQueryTypes","Promise","resolve","InlineField","AsyncSelect","loadOptions","defaultOptions","width","event","HaystackQueryInput","onQueryChange","target","Input","prefix","Icon","placeholder","p","blankQuery","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","jsonData","secureJsonFields","secureJsonData","div","className","labelWidth","url","username","SecretInput","isConfigured","password","onReset","setQueryEditor","onRunQuery","onTypeChange","newType","newQuery","Form","onSubmit","register","errors","VerticalGroup","Button","setVariableQueryEditor","setState","useState","onBlur","queryCmd","span","input","currentTarget"],"sourceRoot":""}